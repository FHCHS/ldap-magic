SELECT DISTINCT RTRIM(camp_txt) AS camp_txt, RTRIM(camp_cod) + 'campus' AS camp_cod FROM campus WHERE camp_txt IS NOT NULL ORDER BY camp_cod;


--Generated by CheckUpdate for new group
SELECT FHC_GROUPS_SQLgroupsTablecampus.camp_txt, FHC_GROUPS_SQLgroupsTablecampus.camp_cod 
    FROM FHC_GROUPS_SQLgroupsTablecampus INNER JOIN FHC_GROUPS_ADgroupsTablecampus 
    ON ltrim(rtrim(FHC_GROUPS_SQLgroupsTablecampus.camp_txt))COLLATE SQL_Latin1_General_CP1_CS_AS 
      + ltrim(rtrim(FHC_GROUPS_SQLgroupsTablecampus.camp_cod)) COLLATE SQL_Latin1_General_CP1_CS_AS  
      = ltrim(rtrim(FHC_GROUPS_ADgroupsTablecampus.description)) COLLATE SQL_Latin1_General_CP1_CS_AS 
      + ltrim(rtrim(FHC_GROUPS_ADgroupsTablecampus.CN)) COLLATE SQL_Latin1_General_CP1_CS_AS 
      GROUP BY FHC_GROUPS_SQLgroupsTablecampus.camp_txt, FHC_GROUPS_SQLgroupsTablecampus.camp_cod 
EXCEPT  
  SELECT FHC_GROUPS_ADgroupsTablecampus.description, 
  FHC_GROUPS_ADgroupsTablecampus.CN 
  FROM FHC_GROUPS_ADgroupsTablecampus


-- Getting students with campus  
SELECT DISTINCT 'CN=' + RTRIM(soc_sec) + ',OU=All Non Active Students,OU=Student Accounts,DC=STUDENTS,DC=FHCHS,DC=EDU' AS soc_sec, 
				RTRIM(camp_cod) + 'campus' AS camp_cod 
				FROM name WHERE soc_sec in 
				(select CN from FHC_ADAlumAppOldAccounts;
				
				
SELECT camp_cod FROM FHC_GROUPS_SQLgroupsTablecampus;

-- This query gets users who are going to be added to group
SELECT DISTINCT uptoDate.* FROM FHC_GROUPS_sqlusersTable uptoDate 
   LEFT OUTER JOIN FHC_GROUPS_ADusersTable outofDate ON outofDate.soc_sec = uptoDate.soc_sec WHERE outofDate.soc_sec IS NULL;



				
  
  
